import { z } from "zod";

import { TRPCError } from "@trpc/server";
import { PrismaClient } from "@prisma/client";

const inputSchema = z.object({});

export type {{ properCase name }}Input = z.infer<typeof inputSchema>;

export class {{ properCase name }}UseCase {
  private input: {{ properCase name }}Input | null = null;

  constructor(private readonly database: PrismaClient) {}

  static get inputSchema() {
    return inputSchema;
  }

  validateInput(input: unknown) {
    const { data, error } = inputSchema.safeParse(input);
    if (error) throw new TRPCError({
      code: 'BAD_REQUEST',
      message: error.errors.flatMap((e) => e.message).join("\n")
    });
    this.input = data;
    return this.input;
  }

  async execute(input: {{ properCase name }}Input) {
    const validatedInput = this.validateInput(input);
    // Logic here
  }
}
