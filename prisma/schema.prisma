// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id String @id @default(cuid())

    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    accounts Account[]
    sessions Session[]

    profiles Profile[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Profile {
    id String @id @default(cuid())

    title       String
    description String @db.Text

    logo   File?  @relation("logo")
    images File[] @relation("profileImages")

    user   User   @relation(fields: [userId], references: [id])
    userId String

    deletedAt DateTime?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    posts Post[]
}

model Post {
    id String @id @default(cuid())

    title   String
    content String @db.Text

    images File[]

    isPublished Boolean @default(false)

    profile   Profile @relation(fields: [profileId], references: [id])
    profileId String

    deletedAt DateTime?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model File {
    id String @id @default(cuid())

    storageProvider String

    originalName    String
    generatedName   String
    sizeInBytes     Int
    mimeType        String
    url             String
    alternativeText String?

    createdAt DateTime @default(now())

    post   Post?   @relation(fields: [postId], references: [id])
    postId String?

    profileFromLogo   Profile? @relation(name: "logo", fields: [profileFromLogoId], references: [id])
    profileFromLogoId String?  @unique

    profileFromImage   Profile? @relation(name: "profileImages", fields: [profileFromImageId], references: [id])
    profileFromImageId String?
}
