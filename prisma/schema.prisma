// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id String @id @default(cuid())

    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    accounts Account[]
    sessions Session[]

    Post Post[]

    profile Profile?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Profile {
    id String @id @default(cuid())

    title       String
    description String @db.Text

    logo   Image?  @relation(name: "logo", fields: [logoId], references: [id])
    logoId String? @unique

    images Image[] @relation("profileImages")

    user   User   @relation(fields: [userId], references: [id])
    userId String @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Post {
    id String @id @default(cuid())

    title   String
    content String @db.Text

    images Image[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    author   User   @relation(fields: [authorId], references: [id])
    authorId String
}

model Image {
    id String @id @default(uuid())

    description String?

    post   Post?   @relation(fields: [postId], references: [id])
    postId String?

    profileFromLogo Profile? @relation(name: "logo")

    profileFromImage Profile? @relation(name: "profileImages", fields: [profileId], references: [id])
    profileId        String?
}
